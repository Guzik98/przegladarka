{"version":3,"sources":["components/helpFunctions.ts","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortArray","a","b","MainPage","useState","evenArray","setEvenArray","oddArray","setOddArray","processing","setProcessing","useEffect","i","number","Math","floor","random","push","className","Button","variant","onClick","sort","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAMaA,EAAY,SAACC,EAAWC,GACjC,OAAOD,EAAIC,G,uBCwDAC,EA1DE,WAAO,IAAD,EACeC,mBAAmB,IADlC,mBACZC,EADY,KACDC,EADC,OAEaF,mBAAmB,IAFhC,mBAEZG,EAFY,KAEFC,EAFE,OAGiBJ,oBAAkB,GAHnC,mBAGZK,EAHY,KAGAC,EAHA,KAKnBC,qBAAU,WACN,GAAIF,EACA,IAAK,IAAIG,EAAI,EAAGA,GAAK,GAAIA,IAAI,CACzB,IAAMC,EDVXC,KAAKC,MAAM,IAAAD,KAAKE,UAFX,ECaIH,EAAS,IAAM,EACfR,EAAUY,KAAKJ,GAEfN,EAASU,KAAKJ,GAI1BH,GAAc,KAChB,CAACD,IAOH,OACI,sBAAKS,UAAU,YAAf,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAU,WAClCX,GAAc,IADlB,4CAKA,qBAAKQ,UAAU,QAAf,UACMT,GACE,qCACI,sBAAKS,UAAU,cAAf,yBAEKb,EAAUiB,KAAKtB,GAAWuB,KAAI,SAACV,GAC5B,OAAS,8BAAMA,UAIvB,sBAAKK,UAAU,aAAf,wBAEKX,EAASe,KAAKtB,GAAWuB,KAAI,SAACV,GACvB,OAAS,8BAAMA,eAOvC,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAU,WA/B1Cf,EAAa,IACbE,EAAY,KA8BR,uBC5CGgB,G,MARH,WACV,OACI,mCACE,cAAC,EAAD,QCOOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe88a4f1.chunk.js","sourcesContent":["export const randomNumber = (): number => {\r\n    const min = 1;\r\n    const max = 100;\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport const sortArray = (a: number, b: number): number => {\r\n    return a - b;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { randomNumber, sortArray } from './helpFunctions';\r\nimport Button from '@mui/material/Button';\r\nimport './main-page.sass';\r\n\r\nconst MainPage = () => {\r\n    const [evenArray, setEvenArray] = useState<number[]>([]);\r\n    const [oddArray, setOddArray] = useState<number[]>([]);\r\n    const [processing, setProcessing] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (processing){\r\n            for (let i = 1; i <= 20; i++){\r\n                const number = randomNumber();\r\n                if (number % 2 === 0){\r\n                    evenArray.push(number);\r\n                } else {\r\n                    oddArray.push(number);\r\n                }\r\n            }\r\n        }\r\n        setProcessing(false);\r\n    },[processing])\r\n\r\n    const reset = () => {\r\n        setEvenArray([]);\r\n        setOddArray([]);\r\n    }\r\n\r\n    return (\r\n        <div className='main-page'>\r\n            <Button variant=\"contained\" onClick={ () => {\r\n                setProcessing(true);\r\n            }}>\r\n                Generate twenty random numbers\r\n            </Button>\r\n            <div className=\"table\">\r\n                {!processing &&\r\n                    <>\r\n                        <div className=\"column even\">\r\n                            Even numbers\r\n                            {evenArray.sort(sortArray).map((number) => {\r\n                                return ( <div>{number}</div> )\r\n                                }\r\n                            )}\r\n                        </div>\r\n                        <div className=\"column odd\">\r\n                            0dd numbers\r\n                            {oddArray.sort(sortArray).map((number) =>{\r\n                                    return ( <div>{number}</div> )\r\n                                }\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n            <Button variant=\"contained\" onClick={ () => { reset() }}>\r\n                Reset\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPage;","import React from 'react';\nimport MainPage from './components/MainPage';\nimport './App.css';\n\nconst App = ():  JSX.Element => {\n  return (\n      <>\n        <MainPage/>\n      </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}